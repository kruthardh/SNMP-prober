#!/usr/bin/python
import easysnmp,time,sys
from easysnmp import Session
from easysnmp import snmp_get, snmp_set, snmp_walk

agent_input=sys.argv
sample_time=1/float(agent_input[2])
ip , port , community = agent_input[1].split(':')
sample=int(sys.argv[3])

oids=[]
initial_oid=[]
next_oid=[]

for x in range (4,len(agent_input)):
    oids.append(sys.argv[x])

oids.insert(0,'1.3.6.1.2.1.2.2.1.10')

def prober():
	global initial_oid,initial_time
	session = Session(hostname=ip,remote_port=port,community='public',version=2,timeout=1,retries=2)
	response = session.get(oids)
	next_oid=[]
	for y in range(1,len(response)):
		next_oid.append(int(response[y].value))
		if sample!=0 and len(initial_oid)>0:
			o_d=int(next_oid[y-1])-int(initial_oid[y-1])
			t_d=round(next_time-initial_time,1)
			rate = str(o_d/t_d)      
			if rate < 0 :
				if response[y].snmp_type == 'COUNTER32':
            				o_d=o_d+2**32
            				print(str(next_time) +"|" +str(o_d / t_d)+"|")
				elif response[y].snmp_type == 'COUNTER64':
            				o_d=o_d+2**64
            				print(str(next_time)+ "|" +str(o_d / t_d)+"|")
			else:
				print(str(next_time)+ "|" +str(rate)+"|")
                
	initial_oid=next_oid
	initial_time=next_time

    
if sample==-1:
	count=0
	initial_oid=[]
	while True:
		next_time=(time.time())
		prober()
		response_time=(time.time())
		count=count+1
		time.sleep(abs(sample_time - response_time + next_time))
else:
	initial_oid=[]		
	for count in range(0,sample+1):
        	next_time=(time.time())
        	prober()
        	response_time=(time.time())    
        	time.sleep(abs(sample_time - response_time + next_time))    
